# -*- coding: utf-8 -*-
"""That allows people to play KBC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KdGXFV9zvziKQEk_HhCcS3phKtd-tqSt
"""

import time
import random
from pydub import AudioSegment
from pydub.playback import play
from IPython.display import Audio, display

# Load the audio file
audio_file = "kbc-awesome-5410.mp3"
audio = AudioSegment.from_file(audio_file)

# Play the audio
play(audio)

# Optionally, you can also display an Audio widget
display(Audio(audio_file, autoplay=True))

# Add a delay to ensure the audio finishes playing before displaying the input prompt
time.sleep(audio.duration_seconds)

print("\n-----------------*Welcome to Kaun Banega Crorepati*------------------")
print("Answer the questions correctly to win increasing amounts of money.")
print("You have two lifelines: 50-50 and Ask the Audience.")
print("_____________________________________________________________________")
# Function to display lifelines
def display_lifelines():
    print("---------------------------------------------------------------")
    print("Lifelines:")
    print("1. 50-50")
    print("2. Ask the Audience")

    print("---------------------------------------------------------------")

# Function to implement 50-50 lifeline
def fifty_fifty(options, correct_answer):
    incorrect_options = [option for option in options if option != correct_answer]
    random.shuffle(incorrect_options)
    options_to_remove = incorrect_options[:len(incorrect_options) // 2]
    for option in options_to_remove:
        options.remove(option)
    return options

# Function to simulate "Ask the Audience" lifeline
def ask_the_audience(correct_answer):
    # Simulate audience voting
    audience_votes = {'A': random.randint(5, 40),
                      'B': random.randint(10, 50),
                      'C': random.randint(20, 60),
                      'D': random.randint(15, 45)}
    audience_votes[correct_answer] += random.randint(10, 30)  # Increase correct answer's votes
    total_votes = sum(audience_votes.values())
    # Normalize votes to percentage
    audience_percentages = {option: (votes / total_votes) * 100 for option, votes in audience_votes.items()}
    return audience_percentages

# Questions and answers
questions = [
    ["A byte corresponds to a cluster of how many bits?", "12 bits", "15 bits", "4 bits", "8 bits", 4],
    ["Among the following, which is a network?", "MAN", "WAN", "LAN", "All of these", 4],
    ["What does Fn mean in Fn key of the computer keyboard?", "Fun", "Finish", "Function", "Final", 3],
    ["The full form of WWW is?", "World Website Web", "World Wide Web", "World Widely Web", "World Wing Web", 2],
    ["The computer is a device and all other tools associated with it, are known as?", "Software", "Hardware", "Firmware", "Manware", 2],
    ["Which of the following is valid storage type?", "CPU", "Keyboard", "Pen Drive", "None of the above", 3],
    ["The brain of any computer system is?", "ALU", "CPU", "None of above", "Memory", 2],
    ["Which of the following is an example of an input device?", "Monitor", "Printer", "Keyboard", "Speaker", 3],
    ["What is the purpose of a graphics card (GPU)?", "To play music", "To process and render graphics and images", "To store data", "To connect to the internet", 2],
    ["Which programming languages are classified as low level languages?", "BASIC", "COBOL", "Fortran", "Assembly languages", 4]
]

# Levels and initial money
levels = [1000, 2000, 3000, 5000, 10000, 20000, 40000, 80000, 160000, 320000]
money = 0

# Play audio prompt for each question
for i, question_data in enumerate(questions):
    if len(question_data) != 6:
        print(f"Problem with question {i+1}: {question_data}")
        continue
    question, option_a, option_b, option_c, option_d, correct_option = question_data
    print(f"\n\nQuestion {i+1} - for Rs. {levels[i]}:")
    print("---------------------------------------------------------------")
    print(f"{question}")
    print(f"A.{option_a}           B.{option_b} ")
    print(f"C.{option_c}           D.{option_d} ")

    # Display lifelines
    display_lifelines()

    # Start timer
    start_time = time.time()

    reply = input("Enter your answer (A/B/C/D) or 0 to quit: ").upper()
    if reply == '0':
        money = levels[i-1] if i > 0 else 0  # Adjusting for quitting before answering any question
        break

    # Implement lifelines
    if reply == '1':
        options = [option_a, option_b, option_c, option_d]
        options = fifty_fifty(options, correct_option)
        print(" Options after 50-50 lifeline:", options)
        reply = input("Enter your answer (A/B/C/D): ").upper()
    elif reply == '2':
        audience_percentages = ask_the_audience(['A', 'B', 'C', 'D'][correct_option-1])
        print("Audience percentages:", audience_percentages)
        reply = input("Enter your answer (A/B/C/D): ").upper()

    # Calculate time taken
    elapsed_time = time.time() - start_time
    print(f"Time taken: {elapsed_time:.2f} seconds")

    if reply == ['A', 'B', 'C', 'D'][correct_option-1]:
        print("---------------------------------------------------------------")
        print(f"Correct answer! You have won Rs.{levels[i]}")
        print("_______________________________________________________________")
        money = levels[i]
    else:
        print("Wrong answer!")
        break

print("_______________________________________")
print("                                       ")
print(f"   Your take-home money is Rs. {money}")
print("|_____________________________________|")

